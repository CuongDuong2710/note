Lecture 46

So one code that's coming from the user, the other code that had been saved to the users record in firebase.

Remember the local project is what we use to add new Google Cloud funtions

// Install firebase
npm install -g firebase-tools

// Login to firebase
firebase login

// Deploy firebase project
firebase deploy --project one-time-password-d0881

// Install firebase in expo project
npm install --save firebase

==================================================================
Lecture 53. Sanitizing User Inputs

// Say that if user did not send a phone, so if a phone is not defined, we're going to immediately stop this function and say hey user you just send us.
// Respone HTTP Request error code, send back a little bit information by sending an object Bad input

  if (!req.body.phone) {
    return res.status(422).send({ error: 'Bad Input' });
  }
  
// If it already is a string no problem the string constructor here will not throw an error. It will just return the exact same string.

  const phone = String(req.body.phone).replace(/[^\d]/g, "")

Twilio phone number  
+12404396725

==================================================================
Lecture 57. Twilio Credentials

// Install Twilio

Z:\reactnative\one-time-password\functions>npm install --save twilio@3.0.0-rc.13

\: backslash
[]: square braces
^: carrot
/: forwardslash
': quote
{}: braces
(): parentheses
'': double quotes
#: hash

500: was an error with a server

==================================================================
Lecture 66. App Boilerplate

// Install axios. This actual library is going to be used to make the actual network request to invoke our Google cloud function.
// 'react-native-elements' to be used for some styling to make our application look slightly nicer.

npm install --save axios react-native-elements

==================================================================
*** IMPORTANT - Lecture 69. Refactoring with Async/Await

// Whenever we make use of promises we always train on .then or .catch

handleSubmit = () => {
	// Two requests are running in sequence and the second will not be executed unless the first one is successful
	axios.post(`${ROOT_URL}/createUser`, {
	  phone: this.state.phone
	})
  .then(() => {
	axios.post(`${ROOT_URL}/requestOneTimePassword`, { phone: this.state.phone })
  })
}

// If this code executed, two requests would run in parallel (song song) because remember javascript does not stop and wait for requets to be completed as soon as.
// It just keeps on chugging along to the next line of code.
// 'async': tells babbel that the code the function is going to contain some async code
handleSubmit = async () => {
	// Two requests are running in sequence and the second will not be executed unless the first one is successful
	// 'await': a little bit of a cheat, hack
	// Tell our compiler after first line of code is executed and the promise has been returned (1st request is completed) = .then()
    // Go on 2nd request
	await axios.post(`${ROOT_URL}/createUser`, { phone: this.state.phone })
	await axios.post(`${ROOT_URL}/requestOneTimePassword`, { phone: this.state.phone })
}



