*** Windows command line

// List all files and folders
dir

// get into folder
cd <folder-name>

==================================================

// Install Node.js and Python 2.0

// Install react-native-cli

npm install -g react-native-cli

// Install a project
react-native init albums

To run your app on iOS:
   cd Z:\reactnative\albums
   react-native run-ios
   - or -
   Open ios\albums.xcodeproj
   Hit the Run button
To run your app on Android:
   cd Z:\reactnative\albums
   Have an Android emulator
   react-native run-android
   
// (adb -s emulator-5554 shell am start -n com.albums/com.albums.MainActivity)

// System Variable
Search -> 'system setting' -> View advanced system settings

JAVA_HOME -> C:\Program Files\Java\jdk1.8.0_91

// Add link of 'platform-tools' folder to Path system variable
Z:\Android\sdk\platform-tools

// If not set path, 'adb' is not recognized as an internal or external command, operable program or batch file

'Ctrl + m' works for Windows in the Android emulator to bring up the React-Native developer menu.
*** Ctrl + C: exit remain shell

=================================================
Push 'albums' project to GitHub

1. Create a new repository on GitHub

2. Open Git Bash

3. Change the current working directory to your local project.

4. Initialize the local directory as a Git repository.

$ git init

5. Add the files in your new local repository. This stages them for the first commit.

git add .

6. Commit the files that you've staged in your local repository.

git commit -m "First commit"

7. At the top of your GitHub repository's Quick Setup page, click  to copy the remote repository URL

8. In the Command prompt, add the URL for the remote repgit remote add origin remote repository URL

git remote add origin <remote repository URL>
# Sets the new remote

git remote -v
# Verifies the new remote URLository where your local repository will be pushed.

9. Push the changes in your local repository to GitHub.

git push origin master


=================================================
Lecture 18. Creating a component with JSX

Babel is a tool that takes GSX and turns it into normal Javascript.
https://babeljs.io

<Text>
  <Text>Some Text</Text>
</Text>

React.createElement(
  Text,
  null,
  React.createElement(
    Text,
    null,
    "Some Text"
  ),
);



can't find variable: React Native => remove ReactNative chỗ AppRegistry đi 

=================================================
Lecture 22. Creating a component with JSX

// name of function same as file name
const Header = () => {
	...
};

// Make the component available to other parts of the app
export default Header;

// './src/components/header' is wrong. It error unresolved module
// Paste link absolute

=================================================
Lecture 28. Making Header Reusable

Create 'props' and send data from parent view to child

// parent view
const App = () => (
		<Header headerText={'Albums'}/>
);

// child 'Header'
const Header = (props) => {
    const { textStyle, viewStyle } = style;

    return (
        <View style={viewStyle}>
            <Text style={textStyle}>{props.headerText}</Text>
        </View>
    );
};

=================================================
SECTION 7: HTTP REQUESTS WITH REACT NATIVE

Lecture 31. Class Base Component

// Difference about Function Component and Class component
// Lifecycle methods
=================================================
Lecture 32. Lifecycle methods

// use 'console.log' to debug    
	componentWillMount() {
        console.log('componentWillMount in AlbumList');
        debugger;
    }
	
// on emulator, Debug JS Remotely

=================================================
Lecture 34. Network Request

// Install 'axios' library
npm install --save axios

// Error: EPERM: operation not permitted, rename
=> Turn off antivirus software (https://github.com/react-community/create-react-native-app/issues/191)


import axios from 'axios';

    componentWillMount() {
          axios.get('https://rallycoding.herokuapp.com/api/music_albums')
            .then(response => console.log(response));
    }

=================================================
Lecture 35. Component Level State

// this.setState extends from Component

 state = { albums: [] };

 axios.get('https://rallycoding.herokuapp.com/api/music_albums')
     .then(response => this.setState({ albums: response.data }));
	 
 console.log(this.state);
 
=================================================
Lecture 36. More on Component Level State

// Whenever we want to communicate a parent component to a child component we use props

=================================================
Lecture 37. Rendering A List of Components

*** //ERROR: Cannot read property 'albums' of undefined
// Because I have declared 'state' in 'componentWillMount' function (local variable)


    componentWillMount() {
			state = { albums: [] };
          axios.get('https://rallycoding.herokuapp.com/api/music_albums')
            .then(response => this.setState({ albums: response.data }));
    }
	
// So I have just declared 'state' is global variable

	state = { albums: [] };
	componentWillMount() {
          axios.get('https://rallycoding.herokuapp.com/api/music_albums')
            .then(response => this.setState({ albums: response.data }));
    }
	
//Warning: Each child in an array or iterator should have a unique "key" prop. => https://facebook.github.io/react/docs/lists-and-keys.html#keys
// Declare key for each child

<Text key={album.title}>{album.title}</Text>)


=================================================
Lecture 41. Passing Components as Props

// Any time that we pass a component that we write another component that component will show up on the prop's object as props dot children.
***ERROR// Check lỗi import đúng tên thư viện chưa?
***ERROR// Truyền tham số vô dùng {} chứ không phải <>
***ERROR// <name> is not defined => check xem đã import vô chưa?


=================================================
SECTION 8: Handling Component Layout

Lecture 46. Image with React native

const { headerContentStyle, thumbnailStyle } = styles;

<Image
     style={thumbnailStyle}
     source = {{ uri: thumbnail_image }}
/>

const styles = {
    thumbnailStyle: {
        height: 50,
        width: 50
    }
};

Lecture 48. Making Content Scrollable

// AlbumList cannot scroll down
// So add 'flex' to root element. It will expand this component to fill the entire content area of the device.

const App = () => (
	<View style={{ flex: 1 }}>
		<Header headerText={'Albums'} />
		<AlbumList />
	</View>
);

=================================================
Lecture 46. Responding to User Input

<TouchableOpacity onPress={() => console.log('pressed!')}  style={buttonStyle} >
            <Text style={textStyle}>
                Click me!!!
            </Text>
        </TouchableOpacity>

// using props
// parent component
<Button onPress={() => console.log(title)} />

//children component
<TouchableOpacity onPress={onPress}  style={buttonStyle} >

=================================================
Lecture 53. Linking Between Mobile Apps

// 1. import 'Linking'
import { View, Text, Image, Linking } from 'react-native';

// 2. openURL(url)
<Button onPress={() => Linking.openURL(url)} />

=================================================
Lecture 72. Creating an Activity Spinner

import { View, ActivityIndicator } from 'react-native';

<View style={styles.spinnerStyle}>
            <ActivityIndicator size={size || 'large'} />
</View>

=================================================
Lecture 75. Handling Authentication Event

// In App.js, create state to track 'loggedIn' status

    state = { loggedIn: false };
	
// Whether or not the user is currently signed in or signed out to our application
// It does this by watching this on stage changed callback from the firebase library

    firebase.auth().onAuthStateChanged((user) => {
        if (user) {
            this.setState({ loggedIn: true });
        } else {
            this.setState({ loggedIn: false });
        }
    });
	
***// Put this code into componentWillMount() function

